#!/Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10

import os
import pandas as pd
from pandas.tseries.offsets import CustomBusinessDay
from pandas.tseries.holiday import USFederalHolidayCalendar
from datetime import datetime
import yfinance as yf
import tkinter as tk
from tkinter import filedialog
import rumps
from AppKit import NSApplication, NSStatusBar, NSTextField, NSColor, NSView, NSMakeRect, NSVariableStatusItemLength

def get_file_path():
    home_dir = os.path.expanduser('~')
    config_path = os.path.join(home_dir, 'stocks_file_path.txt')
    
    if os.path.exists(config_path):
        with open(config_path, 'r') as file:
            saved_path = file.read().strip()
            if os.path.exists(saved_path):
                return saved_path
    
    root = tk.Tk()
    root.withdraw()
    path = filedialog.askopenfilename(
        initialdir="/Users/", 
        title="Select location of stocks.xls file", 
        filetypes=(("Excel files", "*.xls *.xlsx"), ("all files", "*.*"))
    )
    root.destroy()
    if path:
        with open(config_path, 'w') as file:
            file.write(path)
        return path
    else:
        print("No file selected.")
        exit(1)

class StockApp(rumps.App):
    def __init__(self):
        super(StockApp, self).__init__("")
        self.file_path = get_file_path()
        if not os.path.exists(self.file_path):
            rumps.alert("File not found, please check the path and try again.")
            exit(1)
        self.df = pd.read_excel(self.file_path)
        self.ticker_symbols = self.df['Ticker'].tolist()
        self.shares = dict(zip(self.df['Ticker'], self.df['Shares']))

        self.menu = ['Update']
        self.status_bar = NSStatusBar.systemStatusBar()
        self.status_item = self.status_bar.statusItemWithLength_(NSVariableStatusItemLength)

        self.timer = rumps.Timer(self.on_tick, 1)  # Update every 1 seconds
        self.timer.start()

    def on_tick(self, sender):
        total_portfolio_value_today = 0
        total_portfolio_value_yesterday = 0
        today = pd.Timestamp.today().normalize()
        us_bd = CustomBusinessDay(calendar=USFederalHolidayCalendar())
        previous_business_day = today - us_bd
        
        for ticker_symbol in self.ticker_symbols:
            try:
                ticker = yf.Ticker(ticker_symbol)
                historical_data = ticker.history(start=previous_business_day - 5 * us_bd, end=datetime.now())
                print(historical_data)
                
                if not historical_data.empty and len(historical_data) >= 2:
                    previous_day_close_price = historical_data['Close'].iloc[-2]
                    total_value_yesterday = previous_day_close_price * self.shares[ticker_symbol]
                    total_portfolio_value_yesterday += total_value_yesterday

                    current_price = historical_data['Close'].iloc[-1]
                    total_value_today = current_price * self.shares[ticker_symbol]
                    total_portfolio_value_today += total_value_today
                else:
                    print(f"Error: Insufficient price data found for {ticker_symbol}")
            except Exception as e:
                print(f"Error occurred for {ticker_symbol}: {e}")

        change_in_value = total_portfolio_value_today - total_portfolio_value_yesterday
        formatted_change_in_value = "${:,.2f}".format(change_in_value)
        
        self.update_status_bar(formatted_change_in_value, change_in_value)

    def update_status_bar(self, text, value):
        # Create a custom view for the status bar
        view = NSView.alloc().initWithFrame_(NSMakeRect(0, 0, 100, 22))
        label = NSTextField.alloc().initWithFrame_(NSMakeRect(0, 0, 100, 22))

        # Set the label properties
        label.setStringValue_(text)
        label.setBezeled_(False)
        label.setDrawsBackground_(False)
        label.setEditable_(False)
        label.setSelectable_(False)
        label.setAlignment_(2)  # Center alignment

        # Set the text color based on the value
        if value >= 0:
            label.setTextColor_(NSColor.blueColor())
        else:
            label.setTextColor_(NSColor.redColor())

        # Add the label to the view
        view.addSubview_(label)
        
        # Set the custom view to the status item
        self.status_item.setView_(view)

    @rumps.clicked("Update")
    def on_update(self, _):
        self.on_tick(None)

if __name__ == "__main__":
    # Initialize NSApplication
    app = NSApplication.sharedApplication()
    stock_app = StockApp()
    stock_app.run()
